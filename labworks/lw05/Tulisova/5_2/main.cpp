#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>
#include <sys/stat.h>
//Лабораторная работа №5
//Тема:Организация работы с разделяемой памятью.
///Задание:Первая программа должна создавать сегмент разделяемой памяти и копировать туда
///собственный исходный текст, вторая программа должна брать оттуда этот
///текст, печатать его на экране и удалять сегмент разделяемой памяти из системы.
//Выполнила студентка группы ИСТбд-22: Тулисова А.А.
using namespace std;

int main()
{

    key_t key = ftok("/home/Anna", 1);
    int sh = shmget(key, sizeof(int), IPC_CREAT|0777); // получаем значение ключа
    int* memory = (int*)shmat(sh, NULL, 0); // отображаем область разделяемой памяти по ключу в адресное пространство текущего процесса
    int length = *memory;
    shmdt(memory); // После окончания использования разделяемой памяти,
    //процесс может уменьшить размер своего адресного пространства, исключив из него эту область
    sh = shmget(key, length+sizeof(int), IPC_CREAT|0777); // получаем значение дескриптора
    memory = (int*)shmat(sh, NULL, 0); // и  отображаем его в адресное пространство
    int* tmp = memory;
    tmp++;
    char* c = (char *) tmp;
    char buff[length];
    for (int i = 0; i < length-1; i++) // считываем каждый символ
    {
        buff[i] = *c;
        c++;
    }
    cout<<buff<<endl; //и выволим в консоль
    shmdt(memory); // освобождаем адресное пространство, исключив из него эту область
    shmctl(sh, IPC_RMID, NULL); // Этот системный вызов позволяет полностью ликвидировать область разделяемой памяти
    // в операционной системе по заданному дескриптору средства IPC.
    return 0;
}
