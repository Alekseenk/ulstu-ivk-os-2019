#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <errno.h>
#include <sys/stat.h>
//Лабораторная работа №5
//Тема:Организация работы с разделяемой памятью.
///Задание:Первая программа должна создавать сегмент разделяемой памяти и копировать туда
///собственный исходный текст, вторая программа должна брать оттуда этот
///текст, печатать его на экране и удалять сегмент разделяемой памяти из системы.
//Выполнила студентка группы ИСТбд-22: Тулисова А.А.
using namespace std;

int main()
{
    int cpp = open("/home/Documents/5/5_1/main.cpp", O_RDONLY);
    struct stat st; // структура необходима для получения информации о файле
    lstat("/home/Anna/Documents/5/5_1/main.cpp", &st); //возвращает информацию о файле и заполняет структуру st
    int sizeST = st.st_size;
    key_t key = ftok("/home/Anna", 1);//Получение значения ключа из двух компонентов осуществляется функцией ftok()
    int sh;
    if ((sh = shmget(key, sizeST+sizeof(int), IPC_CREAT|IPC_EXCL|0777))<0) //Для создания области разделяемой памяти
    //с определенным ключом или доступа по ключу к уже существующей области применяется системный вызов shmget()
    //Системный вызов shmget предназначен для выполнения операции доступа к сегменту разделяемой памяти и, в случае его успешного завершения,
    //возвращает дескриптор System V IPC для этого сегмента (целое неотрицательное число,
    //однозначно характеризующее сегмент внутри вычислительной системы и использующееся в дальнейшем для других операций с ним).
    {
        if(errno != EEXIST) // если ошибка не заключается в том, что сегмент уже существовал
        {
            cout<<"Невозможно создать разделяемую память!"<<endl;
            return 1;
        }
        else
        {
            if ((sh = shmget(key, 1, 0))<0)
            {
                cout<<"Невозможно найти разделяемую память!"<<endl;
                return 1;
            }
            shmctl(sh, IPC_RMID, NULL);
            sh = shmget(key, sizeST+sizeof(int), IPC_CREAT|0777);//получаем дескритор
        }
    }
    int* memory = (int*)shmat(sh, NULL, 0); // После получения дескриптора необходимо
        //включить область разделяемой памяти в адресное пространство текущего процесса
    int* tmp = memory;
    *tmp = sizeST;
    tmp++;
    char * c = (char *)tmp;
    read(cpp, c, sizeST); // прочитываем содержимое нашего файла
    close(cpp); // закрываем файл после прочтения
    shmdt(memory); // После окончания использования разделяемой памяти,
    //процесс может уменьшить размер своего адресного пространства, исключив из него эту область с помощью системного вызова shmdt().
    return 0;
}
