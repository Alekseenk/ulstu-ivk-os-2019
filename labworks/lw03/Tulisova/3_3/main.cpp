/* Пример создания нового процесса с разной работой процессов
ребенка и родителя и завершнением процесса-ребёнка*/
#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
int main()
{ pid_t pid, ppid, new_proc;
	printf("Лабораторная работа №3. Часть 3. \n Подготовила студентка гр.ИСТбд-22 Тулисова Анна.\n");
	int a = 0;
/* При успешном создании нового процесса с этого места псевдопараллельно
начинают работать два процесса: старый и новый */
	new_proc = fork();
/* Узнаем идентификаторы текущего и родительского процесса (в каждом из
процессов !!!) */
	pid = getpid();
	ppid = getppid();
/* Перед выполнением следующего выражения значение переменной a в
обоих процессах равно 0 */
	if (new_proc == -1)
		printf("Ошибка!\n");
	else
	{
		if (new_proc == 0)
		{
			printf("Запущен порождённый процесс, который будет сейчас завершён %d!\n", new_proc);
			exit(0); /*При выполнении этой функции происходит сброс всех частично заполненных буферов ввода-вывода с закрытием соответствующих потоков,
					после чего инициируется системный вызов прекращения работы процесса и перевода его в состояние закончил исполнение.
					Функция exit() процессуродителю ничего не возвращает. Значение параметра передаётся ядру ОС*/
		}
		else printf("Запущен родительский процесс %d!\n", new_proc);
	}
	for (int i = 0; i<100000; i++){
		a++;
/* Печатаем значения PID, PPID и вычисленное значение переменной a (в
каждом из процессов !!!) */
		printf("My pid = %d, my ppid = %d, result = %d\n", (int)pid, (int)ppid, a);
	}
//	scanf("%i", a);
return 0;
}
