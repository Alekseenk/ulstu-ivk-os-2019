#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
//Лабораторная работа №4.2
//Межпроцессное взаймодействие через канал pipe
//Выполнила студентка гр.ИСТбд-22 Гуськова Ю.А.
using namespace std;
int main()
{
    printf("Лабораторная работа №4.2\n");
    printf("Межпроцессное взаймодействие через канал pipe\n");
    printf("Выполнила студентка гр.ИСТбд-22 Гуськова Ю.А.\n");
    printf("Задание: измените предыдущий пример, причем для двухсторонней связи используйте\
             два канала: один для передачи от родителя ребенку, второй – от ребенка родителю.\n");
	int fdParent[2], fdChild[2], result;//fd[0]-будет занесен файловый дескриптор, соотв. входному потоку данных канала
                        //и позволяющий выподнять только операцию чтения
                       //fd[1] - будет занесен файловый дескриптор, соответствующий
                     //выходному потоку данных и позволяющий выполнять только операцию записи
	size_t size;
	char resForChild[17], resForParent[15];
	//Канал pipe служит для организации однонаправленной или симплекс-
    //ной связи. При попытке организовать через pipe двустороннюю связь, когда
    //процесс-родитель пишет информацию в pipe, предполагая, что ее получит
    //процесс-ребенок, а затем читает информацию из канала pipe, предполагая,
    //что ее записал порожденный процесс, то могла бы возникнуть ситуация, в
    //которой процесс-родитель прочитал бы собственную информацию, а про-
    //цесс-ребенок не получил бы ничего. Для использования одного канала pipe в
    //двух направлениях необходимы специальные средства синхронизации процессов.
	pipe(fdParent); //канал для записи родителем, чтения потомком
	pipe(fdChild); //канал для записи потомком, чтения родителем
	result = fork();
	if (result > 0)
	{ //работает родительский процесс
		close(fdParent[0]);//закрываем поток чтения родителем
		close(fdChild[1]);//закрываем поток записи потомком
		printf("Родитель: Начало записи строки...\n");
		size = write(fdParent[1], "Child", 15);
		printf("Родитель: Конец записи строки\n");
		printf("Родитель: Ожидание получения строки...\n");
		size = read(fdChild[0], resForParent, 17);
		printf("Родитель: Конец чтения полученной строки\n");
		printf("Родитель: Полученное сообщение: %s\n", resForParent);
		close(fdParent[1]);//закрываем поток записи родителем
		close(fdChild[0]);//закрываем поток чтения потомком
        printf("Родитель: Закрыл потоки.\n");
	}
	else
	{ //работает дочеоний процесс
	    close(fdParent[1]);//закрываем поток записи данных родителем
		close(fdChild[0]);//закрываем поток чтения данных потомком
		printf("Потомок: Начало чтения строки... \n");
		size = read(fdParent[0], resForChild, 15);
		printf("Потомок: Конец чтения полученной строки \n");
		printf("Потомок: Полученное сообщение: %s\n", resForChild);
		printf("Потомок: Начало записи строки...\n");
		size = write(fdChild[1], "Parent", 17);
		printf("Потомок: Конец записи строки\n");
		close(fdParent[0]);//закрываем поток чтения родителем
		close(fdChild[1]);//закрываем поток записи потомком
		printf("Потомок: Закрыл потоки. \n");
	}
	return 0;
}
