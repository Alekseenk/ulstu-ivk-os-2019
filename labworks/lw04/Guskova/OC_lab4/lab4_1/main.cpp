#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
using namespace std;
//Лабораторная работа №4.1
//Межпроцессное взаймодействие через канал pipe
//Выполнила студентка гр.ИСТбд-22 Гуськова Ю.А.
int main()
{
    printf("Лабораторная работа №4.1\n");
    printf("Межпроцессное взаймодействие через канал pipe\n");
    printf("Выполнила студентка гр.ИСТбд-22 Гуськова Ю.А.\n");
    printf("Задание: модифицируйте пример для связи между собой двух родственных процессов, исполняющих разные программы.\n");
	int fd[2], result;//fd - указатель на массив из двух целых переменных
	size_t size;//
	char string[] = "Some text";//строка для записи
	char resstring[14];//строка для чтения
	int channel=pipe(fd);// создаём канал с двумя файловыми дескрипторами - потоки ввода и вывода
    if (channel == 0)         //ошибка -1 ,0 при нормальном исполнении
    {                  //fd[0]-будет занесен файловый дескриптор, соотв. входному потоку данных канала
                        //и позволяющий выподнять только операцию чтения
                       //fd[1] - будет занесен файловый дескриптор, соответствующий
                     //выходному потоку данных и позволяющий выполнять только операцию записи
        result = fork(); // определяем дочерний процесс
        if (result > 0)
        { //работает родительский процесс
            printf("Работу начал родительский процесс\n");// родитель записывает строку в канал
            close(fd[0]);//закрываем входной поток данных
            printf("Начали запись строки...\n");
            size = write(fd[1],string, 14); //запись всей строки вместе с признаком конца строки в канал
            printf("Записали строку...\n");
            close(fd[1]); // закрываем выходной поток данных
            //если есть процессы, у которых этот pipe открыт для записи, то системный вызов read блокируется и
            //ждет появления информации
            printf("Закрыли выходной поток! \n");
        }
        else
         {//работает дочеоний процесс
            printf("Работу начал дочерний процесс\n");// потомок читает строку из канала через входной поток
            close(fd[1]); //закрываем выходной поток данных
            printf("Начали чтение строки...\n");
            size = read(fd[0], resstring, 14); // если читается из пустого канала, то процесс блокируется
                                                //(write,read - блокирующие системные вызовы)
            printf("Прочитали строку...\n");
            printf("Прочитанная строка: \n");
            printf("%s\n", resstring);// печатаем прочитанные строки
            close(fd[0]); //закрываем входной поток данных
            printf("Закрыли входной поток! \n");
         }
	}
	else
        printf("Ошибка создания канала...\n");
    return 0;
}
